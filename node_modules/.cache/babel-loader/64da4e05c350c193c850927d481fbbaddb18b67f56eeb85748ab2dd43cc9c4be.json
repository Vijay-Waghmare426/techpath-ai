{"ast":null,"code":"// API service for interview-related data\n// This will be replaced with actual API calls later\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Mock data that would come from database\nconst mockQuestions = [{\n  id: 1,\n  question: \"What is the difference between let, const, and var in JavaScript?\",\n  category: \"frontend\",\n  difficulty: \"Beginner\",\n  type: \"Conceptual\",\n  tags: [\"JavaScript\", \"ES6\", \"Variables\"],\n  answer: \"var is function-scoped and can be redeclared, let is block-scoped and can be reassigned, const is block-scoped and cannot be reassigned.\",\n  popular: true,\n  views: 1250,\n  likes: 89,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 2,\n  question: \"Explain the concept of closures in JavaScript with an example.\",\n  category: \"frontend\",\n  difficulty: \"Intermediate\",\n  type: \"Conceptual\",\n  tags: [\"JavaScript\", \"Closures\", \"Scope\"],\n  answer: \"A closure is a function that has access to variables in its outer scope even after the outer function has returned. Example: function outer() { let x = 10; return function inner() { console.log(x); }; }\",\n  popular: false,\n  views: 890,\n  likes: 67,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 3,\n  question: \"How do you optimize React component performance?\",\n  category: \"frontend\",\n  difficulty: \"Intermediate\",\n  type: \"Performance\",\n  tags: [\"React\", \"Performance\", \"Optimization\"],\n  answer: \"Use React.memo, useMemo, useCallback, lazy loading, avoid inline functions in JSX, implement virtualization for large lists, and use proper key props.\",\n  popular: true,\n  views: 2100,\n  likes: 156,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 4,\n  question: \"What is the difference between REST and GraphQL APIs?\",\n  category: \"backend\",\n  difficulty: \"Intermediate\",\n  type: \"Conceptual\",\n  tags: [\"API\", \"REST\", \"GraphQL\"],\n  answer: \"REST uses multiple endpoints and HTTP methods, GraphQL uses single endpoint with flexible queries. GraphQL allows clients to request specific data, reducing over-fetching.\",\n  popular: false,\n  views: 1456,\n  likes: 98,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 5,\n  question: \"Explain the CAP theorem in distributed systems.\",\n  category: \"backend\",\n  difficulty: \"Advanced\",\n  type: \"System Design\",\n  tags: [\"Distributed Systems\", \"CAP Theorem\", \"Database\"],\n  answer: \"CAP theorem states you can only guarantee 2 of 3: Consistency, Availability, and Partition tolerance in a distributed system.\",\n  popular: false,\n  views: 756,\n  likes: 45,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 6,\n  question: \"How would you implement authentication in a Node.js application?\",\n  category: \"backend\",\n  difficulty: \"Intermediate\",\n  type: \"Implementation\",\n  tags: [\"Node.js\", \"Authentication\", \"JWT\", \"Security\"],\n  answer: \"Use JWT tokens, bcrypt for password hashing, middleware for protection, and secure storage practices.\",\n  popular: false,\n  views: 934,\n  likes: 72,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 7,\n  question: \"What is the difference between EC2 and Lambda in AWS?\",\n  category: \"cloud\",\n  difficulty: \"Beginner\",\n  type: \"Conceptual\",\n  tags: [\"AWS\", \"EC2\", \"Lambda\", \"Serverless\"],\n  answer: \"EC2 provides virtual servers you manage, Lambda is serverless compute that auto-scales and you pay per execution.\",\n  popular: false,\n  views: 678,\n  likes: 54,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 8,\n  question: \"How do you implement auto-scaling in AWS?\",\n  category: \"cloud\",\n  difficulty: \"Intermediate\",\n  type: \"Implementation\",\n  tags: [\"AWS\", \"Auto Scaling\", \"Load Balancer\", \"CloudWatch\"],\n  answer: \"Use Auto Scaling Groups with Launch Templates, define scaling policies based on CloudWatch metrics.\",\n  popular: false,\n  views: 567,\n  likes: 43,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 9,\n  question: \"Explain AWS VPC and its components.\",\n  category: \"cloud\",\n  difficulty: \"Advanced\",\n  type: \"Conceptual\",\n  tags: [\"AWS\", \"VPC\", \"Networking\", \"Security\"],\n  answer: \"VPC is a virtual network where you can launch AWS resources. Components include subnets, route tables, internet gateways, NAT gateways, and security groups.\",\n  popular: true,\n  views: 1234,\n  likes: 89,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 10,\n  question: \"Explain the difference between Docker and Kubernetes.\",\n  category: \"devops\",\n  difficulty: \"Intermediate\",\n  type: \"Conceptual\",\n  tags: [\"Docker\", \"Kubernetes\", \"Containerization\"],\n  answer: \"Docker creates containers, Kubernetes orchestrates and manages multiple containers across clusters.\",\n  popular: false,\n  views: 1123,\n  likes: 78,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 11,\n  question: \"How do you set up a CI/CD pipeline?\",\n  category: \"devops\",\n  difficulty: \"Advanced\",\n  type: \"Implementation\",\n  tags: [\"CI/CD\", \"Jenkins\", \"GitLab\", \"Pipeline\"],\n  answer: \"Define stages for build, test, and deploy using tools like Jenkins, GitLab CI, or GitHub Actions with automated triggers.\",\n  popular: true,\n  views: 1876,\n  likes: 134,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 12,\n  question: \"What is Infrastructure as Code (IaC)?\",\n  category: \"devops\",\n  difficulty: \"Intermediate\",\n  type: \"Conceptual\",\n  tags: [\"IaC\", \"Terraform\", \"CloudFormation\", \"Ansible\"],\n  answer: \"IaC is managing infrastructure through code rather than manual processes. Tools like Terraform and CloudFormation enable version control and automation.\",\n  popular: false,\n  views: 845,\n  likes: 62,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 13,\n  question: \"What is the difference between SQL and NoSQL databases?\",\n  category: \"database\",\n  difficulty: \"Beginner\",\n  type: \"Conceptual\",\n  tags: [\"SQL\", \"NoSQL\", \"Database\", \"ACID\"],\n  answer: \"SQL databases are relational with ACID properties, NoSQL are non-relational with flexible schemas and eventual consistency.\",\n  popular: false,\n  views: 987,\n  likes: 71,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 14,\n  question: \"How do you optimize database query performance?\",\n  category: \"database\",\n  difficulty: \"Intermediate\",\n  type: \"Performance\",\n  tags: [\"Database\", \"Optimization\", \"Indexing\", \"Query\"],\n  answer: \"Use proper indexing, query optimization, avoid N+1 queries, use EXPLAIN plans, and database-specific tuning.\",\n  popular: false,\n  views: 756,\n  likes: 58,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 15,\n  question: \"Explain database normalization and its forms.\",\n  category: \"database\",\n  difficulty: \"Advanced\",\n  type: \"Conceptual\",\n  tags: [\"Database\", \"Normalization\", \"Design\", \"RDBMS\"],\n  answer: \"Normalization reduces data redundancy. 1NF eliminates duplicate columns, 2NF removes partial dependencies, 3NF removes transitive dependencies.\",\n  popular: true,\n  views: 1345,\n  likes: 98,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 16,\n  question: \"Explain React Native vs Flutter for mobile development.\",\n  category: \"mobile\",\n  difficulty: \"Intermediate\",\n  type: \"Comparison\",\n  tags: [\"React Native\", \"Flutter\", \"Mobile\", \"Cross-platform\"],\n  answer: \"React Native uses JavaScript and native components, Flutter uses Dart and custom widgets with better performance.\",\n  popular: false,\n  views: 823,\n  likes: 64,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 17,\n  question: \"How do you handle state management in large React applications?\",\n  category: \"frontend\",\n  difficulty: \"Advanced\",\n  type: \"Architecture\",\n  tags: [\"React\", \"State Management\", \"Redux\", \"Context\"],\n  answer: \"Use Redux for complex state, Context API for simple global state, and local state for component-specific data.\",\n  popular: false,\n  views: 1567,\n  likes: 112,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 18,\n  question: \"What are React Hooks and their benefits?\",\n  category: \"frontend\",\n  difficulty: \"Intermediate\",\n  type: \"Conceptual\",\n  tags: [\"React\", \"Hooks\", \"useState\", \"useEffect\"],\n  answer: \"Hooks allow you to use state and lifecycle features in functional components. Benefits include code reuse, simpler testing, and better performance.\",\n  popular: true,\n  views: 2345,\n  likes: 178,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 19,\n  question: \"Design a URL shortener like bit.ly\",\n  category: \"backend\",\n  difficulty: \"Advanced\",\n  type: \"System Design\",\n  tags: [\"System Design\", \"Scalability\", \"Database Design\"],\n  answer: \"Use base62 encoding, database sharding, caching layer, load balancers, and analytics tracking.\",\n  popular: true,\n  views: 2876,\n  likes: 198,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 20,\n  question: \"What is iOS vs Android development differences?\",\n  category: \"mobile\",\n  difficulty: \"Beginner\",\n  type: \"Comparison\",\n  tags: [\"iOS\", \"Android\", \"Swift\", \"Kotlin\"],\n  answer: \"iOS uses Swift/Objective-C with Xcode, Android uses Kotlin/Java with Android Studio. Different UI guidelines and app store policies.\",\n  popular: false,\n  views: 654,\n  likes: 45,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}];\n\n// Calculate dynamic category data based on questions\nconst calculateCategoryStats = () => {\n  const categories = {};\n  mockQuestions.forEach(question => {\n    if (!categories[question.category]) {\n      categories[question.category] = {\n        questionCount: 0,\n        totalViews: 0,\n        totalLikes: 0,\n        popularQuestions: 0,\n        difficulties: {\n          Beginner: 0,\n          Intermediate: 0,\n          Advanced: 0\n        },\n        types: {}\n      };\n    }\n    const cat = categories[question.category];\n    cat.questionCount++;\n    cat.totalViews += question.views || 0;\n    cat.totalLikes += question.likes || 0;\n    if (question.popular) cat.popularQuestions++;\n    if (question.difficulty) cat.difficulties[question.difficulty]++;\n    if (question.type) {\n      cat.types[question.type] = (cat.types[question.type] || 0) + 1;\n    }\n  });\n  return categories;\n};\nconst mockCategories = [{\n  id: 'frontend',\n  name: 'Frontend Development',\n  icon: 'Code',\n  description: 'React, JavaScript, HTML/CSS, Vue.js, Angular and frontend frameworks',\n  color: 'from-blue-500 to-cyan-500',\n  popular: true,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 'backend',\n  name: 'Backend Development',\n  icon: 'Server',\n  description: 'Node.js, Python, Java, APIs, databases and server-side technologies',\n  color: 'from-green-500 to-emerald-500',\n  popular: false,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 'cloud',\n  name: 'Cloud & AWS',\n  icon: 'Cloud',\n  description: 'AWS, Azure, GCP, serverless, microservices and cloud architecture',\n  color: 'from-purple-500 to-violet-500',\n  popular: false,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 'devops',\n  name: 'DevOps & Infrastructure',\n  icon: 'Shield',\n  description: 'Docker, Kubernetes, CI/CD, Jenkins, monitoring and deployment',\n  color: 'from-orange-500 to-red-500',\n  popular: false,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 'mobile',\n  name: 'Mobile Development',\n  icon: 'Smartphone',\n  description: 'React Native, Flutter, iOS, Android and mobile app development',\n  color: 'from-pink-500 to-rose-500',\n  popular: false,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}, {\n  id: 'database',\n  name: 'Database & SQL',\n  icon: 'Database',\n  description: 'SQL, NoSQL, MongoDB, PostgreSQL, optimization and data modeling',\n  color: 'from-indigo-500 to-blue-500',\n  popular: false,\n  createdAt: '2025-01-01T00:00:00Z',\n  updatedAt: '2025-01-01T00:00:00Z'\n}];\n\n// Simulate API delay\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// API Functions (will be replaced with actual HTTP calls)\nexport const interviewAPI = {\n  // Get all categories\n  getCategories: async () => {\n    await delay(500); // Simulate network delay\n    try {\n      // Future: const response = await fetch(`${API_BASE_URL}/categories`);\n      // Future: return await response.json();\n      return {\n        success: true,\n        data: mockCategories,\n        message: 'Categories fetched successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        data: [],\n        message: 'Failed to fetch categories',\n        error: error.message\n      };\n    }\n  },\n  // Get category by ID\n  getCategoryById: async categoryId => {\n    await delay(300);\n    try {\n      const category = mockCategories.find(cat => cat.id === categoryId);\n      if (!category) {\n        return {\n          success: false,\n          data: null,\n          message: 'Category not found'\n        };\n      }\n      return {\n        success: true,\n        data: category,\n        message: 'Category fetched successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        data: null,\n        message: 'Failed to fetch category',\n        error: error.message\n      };\n    }\n  },\n  // Get questions by category\n  getQuestionsByCategory: async (categoryId, filters = {}) => {\n    await delay(700);\n    try {\n      let questions = mockQuestions.filter(q => q.category === categoryId);\n\n      // Apply filters\n      if (filters.difficulty) {\n        questions = questions.filter(q => q.difficulty === filters.difficulty);\n      }\n      if (filters.type) {\n        questions = questions.filter(q => q.type === filters.type);\n      }\n      if (filters.search) {\n        const searchLower = filters.search.toLowerCase();\n        questions = questions.filter(q => q.question.toLowerCase().includes(searchLower) || q.tags.some(tag => tag.toLowerCase().includes(searchLower)));\n      }\n\n      // Apply sorting\n      if (filters.sortBy) {\n        switch (filters.sortBy) {\n          case 'popular':\n            questions.sort((a, b) => b.likes - a.likes);\n            break;\n          case 'newest':\n            questions.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n            break;\n          case 'difficulty':\n            const difficultyOrder = {\n              'Beginner': 1,\n              'Intermediate': 2,\n              'Advanced': 3\n            };\n            questions.sort((a, b) => difficultyOrder[a.difficulty] - difficultyOrder[b.difficulty]);\n            break;\n          default:\n            break;\n        }\n      }\n      return {\n        success: true,\n        data: questions,\n        total: questions.length,\n        message: 'Questions fetched successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        data: [],\n        total: 0,\n        message: 'Failed to fetch questions',\n        error: error.message\n      };\n    }\n  },\n  // Get single question\n  getQuestionById: async questionId => {\n    await delay(300);\n    try {\n      const question = mockQuestions.find(q => q.id === parseInt(questionId));\n      if (!question) {\n        return {\n          success: false,\n          data: null,\n          message: 'Question not found'\n        };\n      }\n      return {\n        success: true,\n        data: question,\n        message: 'Question fetched successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        data: null,\n        message: 'Failed to fetch question',\n        error: error.message\n      };\n    }\n  },\n  // Update question stats (views, likes)\n  updateQuestionStats: async (questionId, statType) => {\n    await delay(200);\n    try {\n      // Future: API call to update stats\n      // const response = await fetch(`${API_BASE_URL}/questions/${questionId}/stats`, {\n      //   method: 'POST',\n      //   body: JSON.stringify({ type: statType })\n      // });\n\n      return {\n        success: true,\n        message: `${statType} updated successfully`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to update ${statType}`,\n        error: error.message\n      };\n    }\n  },\n  // Search questions across all categories\n  searchQuestions: async (searchTerm, filters = {}) => {\n    await delay(500);\n    try {\n      let questions = mockQuestions;\n      if (searchTerm) {\n        const searchLower = searchTerm.toLowerCase();\n        questions = questions.filter(q => q.question.toLowerCase().includes(searchLower) || q.tags.some(tag => tag.toLowerCase().includes(searchLower)) || q.answer.toLowerCase().includes(searchLower));\n      }\n\n      // Apply additional filters\n      if (filters.category) {\n        questions = questions.filter(q => q.category === filters.category);\n      }\n      return {\n        success: true,\n        data: questions,\n        total: questions.length,\n        message: 'Search completed successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        data: [],\n        total: 0,\n        message: 'Search failed',\n        error: error.message\n      };\n    }\n  }\n};\n\n// Simple API Functions for backward compatibility\nexport const fetchCategories = async () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const stats = calculateCategoryStats();\n      const categoriesWithStats = mockCategories.map(category => {\n        var _stats$category$id, _stats$category$id2, _stats$category$id3, _stats$category$id4, _stats$category$id5, _stats$category$id6;\n        return {\n          ...category,\n          questionCount: ((_stats$category$id = stats[category.id]) === null || _stats$category$id === void 0 ? void 0 : _stats$category$id.questionCount) || 0,\n          totalViews: ((_stats$category$id2 = stats[category.id]) === null || _stats$category$id2 === void 0 ? void 0 : _stats$category$id2.totalViews) || 0,\n          totalLikes: ((_stats$category$id3 = stats[category.id]) === null || _stats$category$id3 === void 0 ? void 0 : _stats$category$id3.totalLikes) || 0,\n          popularQuestions: ((_stats$category$id4 = stats[category.id]) === null || _stats$category$id4 === void 0 ? void 0 : _stats$category$id4.popularQuestions) || 0,\n          difficulties: ((_stats$category$id5 = stats[category.id]) === null || _stats$category$id5 === void 0 ? void 0 : _stats$category$id5.difficulties) || {\n            Beginner: 0,\n            Intermediate: 0,\n            Advanced: 0\n          },\n          types: ((_stats$category$id6 = stats[category.id]) === null || _stats$category$id6 === void 0 ? void 0 : _stats$category$id6.types) || {}\n        };\n      });\n      resolve(categoriesWithStats);\n    }, 300);\n  });\n};\nexport const fetchQuestionsByCategory = async categoryId => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const questions = mockQuestions.filter(q => q.category === categoryId);\n      resolve(questions);\n    }, 300);\n  });\n};\nexport const fetchQuestionById = async questionId => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const question = mockQuestions.find(q => q.id === parseInt(questionId));\n      resolve(question);\n    }, 200);\n  });\n};\nexport const searchQuestions = async (query, filters = {}) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      let results = [...mockQuestions];\n      if (query) {\n        const lowerQuery = query.toLowerCase();\n        results = results.filter(q => q.question.toLowerCase().includes(lowerQuery) || q.answer.toLowerCase().includes(lowerQuery) || q.tags.some(tag => tag.toLowerCase().includes(lowerQuery)));\n      }\n      if (filters.category) {\n        results = results.filter(q => q.category === filters.category);\n      }\n      if (filters.difficulty) {\n        results = results.filter(q => q.difficulty === filters.difficulty);\n      }\n      if (filters.type) {\n        results = results.filter(q => q.type === filters.type);\n      }\n      resolve(results);\n    }, 400);\n  });\n};\nexport const getQuestionStats = async () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const stats = calculateCategoryStats();\n      const totalQuestions = mockQuestions.length;\n      const totalViews = mockQuestions.reduce((sum, q) => sum + (q.views || 0), 0);\n      const totalLikes = mockQuestions.reduce((sum, q) => sum + (q.likes || 0), 0);\n      const popularQuestions = mockQuestions.filter(q => q.popular).length;\n\n      // Calculate difficulty distribution\n      const difficulties = mockQuestions.reduce((acc, q) => {\n        acc[q.difficulty] = (acc[q.difficulty] || 0) + 1;\n        return acc;\n      }, {});\n\n      // Calculate type distribution\n      const types = mockQuestions.reduce((acc, q) => {\n        acc[q.type] = (acc[q.type] || 0) + 1;\n        return acc;\n      }, {});\n\n      // Calculate category distribution\n      const categories = mockQuestions.reduce((acc, q) => {\n        acc[q.category] = (acc[q.category] || 0) + 1;\n        return acc;\n      }, {});\n      resolve({\n        totalQuestions,\n        totalViews,\n        totalLikes,\n        popularQuestions,\n        difficulties,\n        types,\n        categories,\n        categoryStats: stats\n      });\n    }, 200);\n  });\n};\nexport default interviewAPI;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","mockQuestions","id","question","category","difficulty","type","tags","answer","popular","views","likes","createdAt","updatedAt","calculateCategoryStats","categories","forEach","questionCount","totalViews","totalLikes","popularQuestions","difficulties","Beginner","Intermediate","Advanced","types","cat","mockCategories","name","icon","description","color","delay","ms","Promise","resolve","setTimeout","interviewAPI","getCategories","success","data","message","error","getCategoryById","categoryId","find","getQuestionsByCategory","filters","questions","filter","q","search","searchLower","toLowerCase","includes","some","tag","sortBy","sort","a","b","Date","difficultyOrder","total","length","getQuestionById","questionId","parseInt","updateQuestionStats","statType","searchQuestions","searchTerm","fetchCategories","stats","categoriesWithStats","map","_stats$category$id","_stats$category$id2","_stats$category$id3","_stats$category$id4","_stats$category$id5","_stats$category$id6","fetchQuestionsByCategory","fetchQuestionById","query","results","lowerQuery","getQuestionStats","totalQuestions","reduce","sum","acc","categoryStats"],"sources":["/home/vijayw/HPI_SCRIPTS/techpath-ai/src/services/interviewAPI.js"],"sourcesContent":["// API service for interview-related data\n// This will be replaced with actual API calls later\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Mock data that would come from database\nconst mockQuestions = [\n  {\n    id: 1,\n    question: \"What is the difference between let, const, and var in JavaScript?\",\n    category: \"frontend\",\n    difficulty: \"Beginner\",\n    type: \"Conceptual\",\n    tags: [\"JavaScript\", \"ES6\", \"Variables\"],\n    answer: \"var is function-scoped and can be redeclared, let is block-scoped and can be reassigned, const is block-scoped and cannot be reassigned.\",\n    popular: true,\n    views: 1250,\n    likes: 89,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 2,\n    question: \"Explain the concept of closures in JavaScript with an example.\",\n    category: \"frontend\",\n    difficulty: \"Intermediate\",\n    type: \"Conceptual\",\n    tags: [\"JavaScript\", \"Closures\", \"Scope\"],\n    answer: \"A closure is a function that has access to variables in its outer scope even after the outer function has returned. Example: function outer() { let x = 10; return function inner() { console.log(x); }; }\",\n    popular: false,\n    views: 890,\n    likes: 67,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 3,\n    question: \"How do you optimize React component performance?\",\n    category: \"frontend\",\n    difficulty: \"Intermediate\",\n    type: \"Performance\",\n    tags: [\"React\", \"Performance\", \"Optimization\"],\n    answer: \"Use React.memo, useMemo, useCallback, lazy loading, avoid inline functions in JSX, implement virtualization for large lists, and use proper key props.\",\n    popular: true,\n    views: 2100,\n    likes: 156,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 4,\n    question: \"What is the difference between REST and GraphQL APIs?\",\n    category: \"backend\",\n    difficulty: \"Intermediate\",\n    type: \"Conceptual\",\n    tags: [\"API\", \"REST\", \"GraphQL\"],\n    answer: \"REST uses multiple endpoints and HTTP methods, GraphQL uses single endpoint with flexible queries. GraphQL allows clients to request specific data, reducing over-fetching.\",\n    popular: false,\n    views: 1456,\n    likes: 98,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 5,\n    question: \"Explain the CAP theorem in distributed systems.\",\n    category: \"backend\",\n    difficulty: \"Advanced\",\n    type: \"System Design\",\n    tags: [\"Distributed Systems\", \"CAP Theorem\", \"Database\"],\n    answer: \"CAP theorem states you can only guarantee 2 of 3: Consistency, Availability, and Partition tolerance in a distributed system.\",\n    popular: false,\n    views: 756,\n    likes: 45,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 6,\n    question: \"How would you implement authentication in a Node.js application?\",\n    category: \"backend\",\n    difficulty: \"Intermediate\",\n    type: \"Implementation\",\n    tags: [\"Node.js\", \"Authentication\", \"JWT\", \"Security\"],\n    answer: \"Use JWT tokens, bcrypt for password hashing, middleware for protection, and secure storage practices.\",\n    popular: false,\n    views: 934,\n    likes: 72,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 7,\n    question: \"What is the difference between EC2 and Lambda in AWS?\",\n    category: \"cloud\",\n    difficulty: \"Beginner\",\n    type: \"Conceptual\",\n    tags: [\"AWS\", \"EC2\", \"Lambda\", \"Serverless\"],\n    answer: \"EC2 provides virtual servers you manage, Lambda is serverless compute that auto-scales and you pay per execution.\",\n    popular: false,\n    views: 678,\n    likes: 54,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 8,\n    question: \"How do you implement auto-scaling in AWS?\",\n    category: \"cloud\",\n    difficulty: \"Intermediate\",\n    type: \"Implementation\",\n    tags: [\"AWS\", \"Auto Scaling\", \"Load Balancer\", \"CloudWatch\"],\n    answer: \"Use Auto Scaling Groups with Launch Templates, define scaling policies based on CloudWatch metrics.\",\n    popular: false,\n    views: 567,\n    likes: 43,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 9,\n    question: \"Explain AWS VPC and its components.\",\n    category: \"cloud\",\n    difficulty: \"Advanced\",\n    type: \"Conceptual\",\n    tags: [\"AWS\", \"VPC\", \"Networking\", \"Security\"],\n    answer: \"VPC is a virtual network where you can launch AWS resources. Components include subnets, route tables, internet gateways, NAT gateways, and security groups.\",\n    popular: true,\n    views: 1234,\n    likes: 89,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 10,\n    question: \"Explain the difference between Docker and Kubernetes.\",\n    category: \"devops\",\n    difficulty: \"Intermediate\",\n    type: \"Conceptual\",\n    tags: [\"Docker\", \"Kubernetes\", \"Containerization\"],\n    answer: \"Docker creates containers, Kubernetes orchestrates and manages multiple containers across clusters.\",\n    popular: false,\n    views: 1123,\n    likes: 78,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 11,\n    question: \"How do you set up a CI/CD pipeline?\",\n    category: \"devops\",\n    difficulty: \"Advanced\",\n    type: \"Implementation\",\n    tags: [\"CI/CD\", \"Jenkins\", \"GitLab\", \"Pipeline\"],\n    answer: \"Define stages for build, test, and deploy using tools like Jenkins, GitLab CI, or GitHub Actions with automated triggers.\",\n    popular: true,\n    views: 1876,\n    likes: 134,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 12,\n    question: \"What is Infrastructure as Code (IaC)?\",\n    category: \"devops\",\n    difficulty: \"Intermediate\",\n    type: \"Conceptual\",\n    tags: [\"IaC\", \"Terraform\", \"CloudFormation\", \"Ansible\"],\n    answer: \"IaC is managing infrastructure through code rather than manual processes. Tools like Terraform and CloudFormation enable version control and automation.\",\n    popular: false,\n    views: 845,\n    likes: 62,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 13,\n    question: \"What is the difference between SQL and NoSQL databases?\",\n    category: \"database\",\n    difficulty: \"Beginner\",\n    type: \"Conceptual\",\n    tags: [\"SQL\", \"NoSQL\", \"Database\", \"ACID\"],\n    answer: \"SQL databases are relational with ACID properties, NoSQL are non-relational with flexible schemas and eventual consistency.\",\n    popular: false,\n    views: 987,\n    likes: 71,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 14,\n    question: \"How do you optimize database query performance?\",\n    category: \"database\",\n    difficulty: \"Intermediate\",\n    type: \"Performance\",\n    tags: [\"Database\", \"Optimization\", \"Indexing\", \"Query\"],\n    answer: \"Use proper indexing, query optimization, avoid N+1 queries, use EXPLAIN plans, and database-specific tuning.\",\n    popular: false,\n    views: 756,\n    likes: 58,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 15,\n    question: \"Explain database normalization and its forms.\",\n    category: \"database\",\n    difficulty: \"Advanced\",\n    type: \"Conceptual\",\n    tags: [\"Database\", \"Normalization\", \"Design\", \"RDBMS\"],\n    answer: \"Normalization reduces data redundancy. 1NF eliminates duplicate columns, 2NF removes partial dependencies, 3NF removes transitive dependencies.\",\n    popular: true,\n    views: 1345,\n    likes: 98,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 16,\n    question: \"Explain React Native vs Flutter for mobile development.\",\n    category: \"mobile\",\n    difficulty: \"Intermediate\",\n    type: \"Comparison\",\n    tags: [\"React Native\", \"Flutter\", \"Mobile\", \"Cross-platform\"],\n    answer: \"React Native uses JavaScript and native components, Flutter uses Dart and custom widgets with better performance.\",\n    popular: false,\n    views: 823,\n    likes: 64,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 17,\n    question: \"How do you handle state management in large React applications?\",\n    category: \"frontend\",\n    difficulty: \"Advanced\",\n    type: \"Architecture\",\n    tags: [\"React\", \"State Management\", \"Redux\", \"Context\"],\n    answer: \"Use Redux for complex state, Context API for simple global state, and local state for component-specific data.\",\n    popular: false,\n    views: 1567,\n    likes: 112,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 18,\n    question: \"What are React Hooks and their benefits?\",\n    category: \"frontend\",\n    difficulty: \"Intermediate\",\n    type: \"Conceptual\",\n    tags: [\"React\", \"Hooks\", \"useState\", \"useEffect\"],\n    answer: \"Hooks allow you to use state and lifecycle features in functional components. Benefits include code reuse, simpler testing, and better performance.\",\n    popular: true,\n    views: 2345,\n    likes: 178,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 19,\n    question: \"Design a URL shortener like bit.ly\",\n    category: \"backend\",\n    difficulty: \"Advanced\",\n    type: \"System Design\",\n    tags: [\"System Design\", \"Scalability\", \"Database Design\"],\n    answer: \"Use base62 encoding, database sharding, caching layer, load balancers, and analytics tracking.\",\n    popular: true,\n    views: 2876,\n    likes: 198,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 20,\n    question: \"What is iOS vs Android development differences?\",\n    category: \"mobile\",\n    difficulty: \"Beginner\",\n    type: \"Comparison\",\n    tags: [\"iOS\", \"Android\", \"Swift\", \"Kotlin\"],\n    answer: \"iOS uses Swift/Objective-C with Xcode, Android uses Kotlin/Java with Android Studio. Different UI guidelines and app store policies.\",\n    popular: false,\n    views: 654,\n    likes: 45,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  }\n];\n\n// Calculate dynamic category data based on questions\nconst calculateCategoryStats = () => {\n  const categories = {};\n  \n  mockQuestions.forEach(question => {\n    if (!categories[question.category]) {\n      categories[question.category] = {\n        questionCount: 0,\n        totalViews: 0,\n        totalLikes: 0,\n        popularQuestions: 0,\n        difficulties: { Beginner: 0, Intermediate: 0, Advanced: 0 },\n        types: {}\n      };\n    }\n    \n    const cat = categories[question.category];\n    cat.questionCount++;\n    cat.totalViews += question.views || 0;\n    cat.totalLikes += question.likes || 0;\n    \n    if (question.popular) cat.popularQuestions++;\n    if (question.difficulty) cat.difficulties[question.difficulty]++;\n    if (question.type) {\n      cat.types[question.type] = (cat.types[question.type] || 0) + 1;\n    }\n  });\n  \n  return categories;\n};\n\nconst mockCategories = [\n  {\n    id: 'frontend',\n    name: 'Frontend Development',\n    icon: 'Code',\n    description: 'React, JavaScript, HTML/CSS, Vue.js, Angular and frontend frameworks',\n    color: 'from-blue-500 to-cyan-500',\n    popular: true,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 'backend',\n    name: 'Backend Development',\n    icon: 'Server',\n    description: 'Node.js, Python, Java, APIs, databases and server-side technologies',\n    color: 'from-green-500 to-emerald-500',\n    popular: false,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 'cloud',\n    name: 'Cloud & AWS',\n    icon: 'Cloud',\n    description: 'AWS, Azure, GCP, serverless, microservices and cloud architecture',\n    color: 'from-purple-500 to-violet-500',\n    popular: false,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 'devops',\n    name: 'DevOps & Infrastructure',\n    icon: 'Shield',\n    description: 'Docker, Kubernetes, CI/CD, Jenkins, monitoring and deployment',\n    color: 'from-orange-500 to-red-500',\n    popular: false,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 'mobile',\n    name: 'Mobile Development',\n    icon: 'Smartphone',\n    description: 'React Native, Flutter, iOS, Android and mobile app development',\n    color: 'from-pink-500 to-rose-500',\n    popular: false,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  },\n  {\n    id: 'database',\n    name: 'Database & SQL',\n    icon: 'Database',\n    description: 'SQL, NoSQL, MongoDB, PostgreSQL, optimization and data modeling',\n    color: 'from-indigo-500 to-blue-500',\n    popular: false,\n    createdAt: '2025-01-01T00:00:00Z',\n    updatedAt: '2025-01-01T00:00:00Z'\n  }\n];\n\n// Simulate API delay\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n// API Functions (will be replaced with actual HTTP calls)\nexport const interviewAPI = {\n  // Get all categories\n  getCategories: async () => {\n    await delay(500); // Simulate network delay\n    try {\n      // Future: const response = await fetch(`${API_BASE_URL}/categories`);\n      // Future: return await response.json();\n      return {\n        success: true,\n        data: mockCategories,\n        message: 'Categories fetched successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        data: [],\n        message: 'Failed to fetch categories',\n        error: error.message\n      };\n    }\n  },\n\n  // Get category by ID\n  getCategoryById: async (categoryId) => {\n    await delay(300);\n    try {\n      const category = mockCategories.find(cat => cat.id === categoryId);\n      if (!category) {\n        return {\n          success: false,\n          data: null,\n          message: 'Category not found'\n        };\n      }\n      return {\n        success: true,\n        data: category,\n        message: 'Category fetched successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        data: null,\n        message: 'Failed to fetch category',\n        error: error.message\n      };\n    }\n  },\n\n  // Get questions by category\n  getQuestionsByCategory: async (categoryId, filters = {}) => {\n    await delay(700);\n    try {\n      let questions = mockQuestions.filter(q => q.category === categoryId);\n      \n      // Apply filters\n      if (filters.difficulty) {\n        questions = questions.filter(q => q.difficulty === filters.difficulty);\n      }\n      \n      if (filters.type) {\n        questions = questions.filter(q => q.type === filters.type);\n      }\n      \n      if (filters.search) {\n        const searchLower = filters.search.toLowerCase();\n        questions = questions.filter(q => \n          q.question.toLowerCase().includes(searchLower) ||\n          q.tags.some(tag => tag.toLowerCase().includes(searchLower))\n        );\n      }\n\n      // Apply sorting\n      if (filters.sortBy) {\n        switch (filters.sortBy) {\n          case 'popular':\n            questions.sort((a, b) => b.likes - a.likes);\n            break;\n          case 'newest':\n            questions.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n            break;\n          case 'difficulty':\n            const difficultyOrder = { 'Beginner': 1, 'Intermediate': 2, 'Advanced': 3 };\n            questions.sort((a, b) => difficultyOrder[a.difficulty] - difficultyOrder[b.difficulty]);\n            break;\n          default:\n            break;\n        }\n      }\n\n      return {\n        success: true,\n        data: questions,\n        total: questions.length,\n        message: 'Questions fetched successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        data: [],\n        total: 0,\n        message: 'Failed to fetch questions',\n        error: error.message\n      };\n    }\n  },\n\n  // Get single question\n  getQuestionById: async (questionId) => {\n    await delay(300);\n    try {\n      const question = mockQuestions.find(q => q.id === parseInt(questionId));\n      if (!question) {\n        return {\n          success: false,\n          data: null,\n          message: 'Question not found'\n        };\n      }\n      return {\n        success: true,\n        data: question,\n        message: 'Question fetched successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        data: null,\n        message: 'Failed to fetch question',\n        error: error.message\n      };\n    }\n  },\n\n  // Update question stats (views, likes)\n  updateQuestionStats: async (questionId, statType) => {\n    await delay(200);\n    try {\n      // Future: API call to update stats\n      // const response = await fetch(`${API_BASE_URL}/questions/${questionId}/stats`, {\n      //   method: 'POST',\n      //   body: JSON.stringify({ type: statType })\n      // });\n      \n      return {\n        success: true,\n        message: `${statType} updated successfully`\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `Failed to update ${statType}`,\n        error: error.message\n      };\n    }\n  },\n\n  // Search questions across all categories\n  searchQuestions: async (searchTerm, filters = {}) => {\n    await delay(500);\n    try {\n      let questions = mockQuestions;\n      \n      if (searchTerm) {\n        const searchLower = searchTerm.toLowerCase();\n        questions = questions.filter(q => \n          q.question.toLowerCase().includes(searchLower) ||\n          q.tags.some(tag => tag.toLowerCase().includes(searchLower)) ||\n          q.answer.toLowerCase().includes(searchLower)\n        );\n      }\n\n      // Apply additional filters\n      if (filters.category) {\n        questions = questions.filter(q => q.category === filters.category);\n      }\n\n      return {\n        success: true,\n        data: questions,\n        total: questions.length,\n        message: 'Search completed successfully'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        data: [],\n        total: 0,\n        message: 'Search failed',\n        error: error.message\n      };\n    }\n  }\n};\n\n// Simple API Functions for backward compatibility\nexport const fetchCategories = async () => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const stats = calculateCategoryStats();\n      const categoriesWithStats = mockCategories.map(category => ({\n        ...category,\n        questionCount: stats[category.id]?.questionCount || 0,\n        totalViews: stats[category.id]?.totalViews || 0,\n        totalLikes: stats[category.id]?.totalLikes || 0,\n        popularQuestions: stats[category.id]?.popularQuestions || 0,\n        difficulties: stats[category.id]?.difficulties || { Beginner: 0, Intermediate: 0, Advanced: 0 },\n        types: stats[category.id]?.types || {}\n      }));\n      resolve(categoriesWithStats);\n    }, 300);\n  });\n};\n\nexport const fetchQuestionsByCategory = async (categoryId) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const questions = mockQuestions.filter(q => q.category === categoryId);\n      resolve(questions);\n    }, 300);\n  });\n};\n\nexport const fetchQuestionById = async (questionId) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const question = mockQuestions.find(q => q.id === parseInt(questionId));\n      resolve(question);\n    }, 200);\n  });\n};\n\nexport const searchQuestions = async (query, filters = {}) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      let results = [...mockQuestions];\n      \n      if (query) {\n        const lowerQuery = query.toLowerCase();\n        results = results.filter(q => \n          q.question.toLowerCase().includes(lowerQuery) ||\n          q.answer.toLowerCase().includes(lowerQuery) ||\n          q.tags.some(tag => tag.toLowerCase().includes(lowerQuery))\n        );\n      }\n      \n      if (filters.category) {\n        results = results.filter(q => q.category === filters.category);\n      }\n      \n      if (filters.difficulty) {\n        results = results.filter(q => q.difficulty === filters.difficulty);\n      }\n      \n      if (filters.type) {\n        results = results.filter(q => q.type === filters.type);\n      }\n      \n      resolve(results);\n    }, 400);\n  });\n};\n\nexport const getQuestionStats = async () => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const stats = calculateCategoryStats();\n      const totalQuestions = mockQuestions.length;\n      const totalViews = mockQuestions.reduce((sum, q) => sum + (q.views || 0), 0);\n      const totalLikes = mockQuestions.reduce((sum, q) => sum + (q.likes || 0), 0);\n      const popularQuestions = mockQuestions.filter(q => q.popular).length;\n      \n      // Calculate difficulty distribution\n      const difficulties = mockQuestions.reduce((acc, q) => {\n        acc[q.difficulty] = (acc[q.difficulty] || 0) + 1;\n        return acc;\n      }, {});\n      \n      // Calculate type distribution\n      const types = mockQuestions.reduce((acc, q) => {\n        acc[q.type] = (acc[q.type] || 0) + 1;\n        return acc;\n      }, {});\n      \n      // Calculate category distribution\n      const categories = mockQuestions.reduce((acc, q) => {\n        acc[q.category] = (acc[q.category] || 0) + 1;\n        return acc;\n      }, {});\n      \n      resolve({\n        totalQuestions,\n        totalViews,\n        totalLikes,\n        popularQuestions,\n        difficulties,\n        types,\n        categories,\n        categoryStats: stats\n      });\n    }, 200);\n  });\n};\n\nexport default interviewAPI;"],"mappings":"AAAA;AACA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,MAAMC,aAAa,GAAG,CACpB;EACEC,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,mEAAmE;EAC7EC,QAAQ,EAAE,UAAU;EACpBC,UAAU,EAAE,UAAU;EACtBC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,CAAC,YAAY,EAAE,KAAK,EAAE,WAAW,CAAC;EACxCC,MAAM,EAAE,0IAA0I;EAClJC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,gEAAgE;EAC1EC,QAAQ,EAAE,UAAU;EACpBC,UAAU,EAAE,cAAc;EAC1BC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,CAAC,YAAY,EAAE,UAAU,EAAE,OAAO,CAAC;EACzCC,MAAM,EAAE,4MAA4M;EACpNC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,kDAAkD;EAC5DC,QAAQ,EAAE,UAAU;EACpBC,UAAU,EAAE,cAAc;EAC1BC,IAAI,EAAE,aAAa;EACnBC,IAAI,EAAE,CAAC,OAAO,EAAE,aAAa,EAAE,cAAc,CAAC;EAC9CC,MAAM,EAAE,wJAAwJ;EAChKC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,GAAG;EACVC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,uDAAuD;EACjEC,QAAQ,EAAE,SAAS;EACnBC,UAAU,EAAE,cAAc;EAC1BC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,CAAC;EAChCC,MAAM,EAAE,6KAA6K;EACrLC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,iDAAiD;EAC3DC,QAAQ,EAAE,SAAS;EACnBC,UAAU,EAAE,UAAU;EACtBC,IAAI,EAAE,eAAe;EACrBC,IAAI,EAAE,CAAC,qBAAqB,EAAE,aAAa,EAAE,UAAU,CAAC;EACxDC,MAAM,EAAE,+HAA+H;EACvIC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,kEAAkE;EAC5EC,QAAQ,EAAE,SAAS;EACnBC,UAAU,EAAE,cAAc;EAC1BC,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,CAAC,SAAS,EAAE,gBAAgB,EAAE,KAAK,EAAE,UAAU,CAAC;EACtDC,MAAM,EAAE,uGAAuG;EAC/GC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,uDAAuD;EACjEC,QAAQ,EAAE,OAAO;EACjBC,UAAU,EAAE,UAAU;EACtBC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,CAAC;EAC5CC,MAAM,EAAE,mHAAmH;EAC3HC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,2CAA2C;EACrDC,QAAQ,EAAE,OAAO;EACjBC,UAAU,EAAE,cAAc;EAC1BC,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,CAAC,KAAK,EAAE,cAAc,EAAE,eAAe,EAAE,YAAY,CAAC;EAC5DC,MAAM,EAAE,qGAAqG;EAC7GC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,qCAAqC;EAC/CC,QAAQ,EAAE,OAAO;EACjBC,UAAU,EAAE,UAAU;EACtBC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,UAAU,CAAC;EAC9CC,MAAM,EAAE,8JAA8J;EACtKC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,EAAE;EACNC,QAAQ,EAAE,uDAAuD;EACjEC,QAAQ,EAAE,QAAQ;EAClBC,UAAU,EAAE,cAAc;EAC1BC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,CAAC,QAAQ,EAAE,YAAY,EAAE,kBAAkB,CAAC;EAClDC,MAAM,EAAE,qGAAqG;EAC7GC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,EAAE;EACNC,QAAQ,EAAE,qCAAqC;EAC/CC,QAAQ,EAAE,QAAQ;EAClBC,UAAU,EAAE,UAAU;EACtBC,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC;EAChDC,MAAM,EAAE,2HAA2H;EACnIC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,GAAG;EACVC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,EAAE;EACNC,QAAQ,EAAE,uCAAuC;EACjDC,QAAQ,EAAE,QAAQ;EAClBC,UAAU,EAAE,cAAc;EAC1BC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,CAAC,KAAK,EAAE,WAAW,EAAE,gBAAgB,EAAE,SAAS,CAAC;EACvDC,MAAM,EAAE,0JAA0J;EAClKC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,EAAE;EACNC,QAAQ,EAAE,yDAAyD;EACnEC,QAAQ,EAAE,UAAU;EACpBC,UAAU,EAAE,UAAU;EACtBC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,CAAC;EAC1CC,MAAM,EAAE,6HAA6H;EACrIC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,EAAE;EACNC,QAAQ,EAAE,iDAAiD;EAC3DC,QAAQ,EAAE,UAAU;EACpBC,UAAU,EAAE,cAAc;EAC1BC,IAAI,EAAE,aAAa;EACnBC,IAAI,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,UAAU,EAAE,OAAO,CAAC;EACvDC,MAAM,EAAE,8GAA8G;EACtHC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,EAAE;EACNC,QAAQ,EAAE,+CAA+C;EACzDC,QAAQ,EAAE,UAAU;EACpBC,UAAU,EAAE,UAAU;EACtBC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,CAAC,UAAU,EAAE,eAAe,EAAE,QAAQ,EAAE,OAAO,CAAC;EACtDC,MAAM,EAAE,iJAAiJ;EACzJC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,EAAE;EACNC,QAAQ,EAAE,yDAAyD;EACnEC,QAAQ,EAAE,QAAQ;EAClBC,UAAU,EAAE,cAAc;EAC1BC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,CAAC,cAAc,EAAE,SAAS,EAAE,QAAQ,EAAE,gBAAgB,CAAC;EAC7DC,MAAM,EAAE,mHAAmH;EAC3HC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,EAAE;EACNC,QAAQ,EAAE,iEAAiE;EAC3EC,QAAQ,EAAE,UAAU;EACpBC,UAAU,EAAE,UAAU;EACtBC,IAAI,EAAE,cAAc;EACpBC,IAAI,EAAE,CAAC,OAAO,EAAE,kBAAkB,EAAE,OAAO,EAAE,SAAS,CAAC;EACvDC,MAAM,EAAE,gHAAgH;EACxHC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,GAAG;EACVC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,EAAE;EACNC,QAAQ,EAAE,0CAA0C;EACpDC,QAAQ,EAAE,UAAU;EACpBC,UAAU,EAAE,cAAc;EAC1BC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,WAAW,CAAC;EACjDC,MAAM,EAAE,qJAAqJ;EAC7JC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,GAAG;EACVC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,EAAE;EACNC,QAAQ,EAAE,oCAAoC;EAC9CC,QAAQ,EAAE,SAAS;EACnBC,UAAU,EAAE,UAAU;EACtBC,IAAI,EAAE,eAAe;EACrBC,IAAI,EAAE,CAAC,eAAe,EAAE,aAAa,EAAE,iBAAiB,CAAC;EACzDC,MAAM,EAAE,gGAAgG;EACxGC,OAAO,EAAE,IAAI;EACbC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,GAAG;EACVC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,EAAE;EACNC,QAAQ,EAAE,iDAAiD;EAC3DC,QAAQ,EAAE,QAAQ;EAClBC,UAAU,EAAE,UAAU;EACtBC,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC;EAC3CC,MAAM,EAAE,sIAAsI;EAC9IC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE,EAAE;EACTC,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,CACF;;AAED;AACA,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;EACnC,MAAMC,UAAU,GAAG,CAAC,CAAC;EAErBd,aAAa,CAACe,OAAO,CAACb,QAAQ,IAAI;IAChC,IAAI,CAACY,UAAU,CAACZ,QAAQ,CAACC,QAAQ,CAAC,EAAE;MAClCW,UAAU,CAACZ,QAAQ,CAACC,QAAQ,CAAC,GAAG;QAC9Ba,aAAa,EAAE,CAAC;QAChBC,UAAU,EAAE,CAAC;QACbC,UAAU,EAAE,CAAC;QACbC,gBAAgB,EAAE,CAAC;QACnBC,YAAY,EAAE;UAAEC,QAAQ,EAAE,CAAC;UAAEC,YAAY,EAAE,CAAC;UAAEC,QAAQ,EAAE;QAAE,CAAC;QAC3DC,KAAK,EAAE,CAAC;MACV,CAAC;IACH;IAEA,MAAMC,GAAG,GAAGX,UAAU,CAACZ,QAAQ,CAACC,QAAQ,CAAC;IACzCsB,GAAG,CAACT,aAAa,EAAE;IACnBS,GAAG,CAACR,UAAU,IAAIf,QAAQ,CAACO,KAAK,IAAI,CAAC;IACrCgB,GAAG,CAACP,UAAU,IAAIhB,QAAQ,CAACQ,KAAK,IAAI,CAAC;IAErC,IAAIR,QAAQ,CAACM,OAAO,EAAEiB,GAAG,CAACN,gBAAgB,EAAE;IAC5C,IAAIjB,QAAQ,CAACE,UAAU,EAAEqB,GAAG,CAACL,YAAY,CAAClB,QAAQ,CAACE,UAAU,CAAC,EAAE;IAChE,IAAIF,QAAQ,CAACG,IAAI,EAAE;MACjBoB,GAAG,CAACD,KAAK,CAACtB,QAAQ,CAACG,IAAI,CAAC,GAAG,CAACoB,GAAG,CAACD,KAAK,CAACtB,QAAQ,CAACG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;IAChE;EACF,CAAC,CAAC;EAEF,OAAOS,UAAU;AACnB,CAAC;AAED,MAAMY,cAAc,GAAG,CACrB;EACEzB,EAAE,EAAE,UAAU;EACd0B,IAAI,EAAE,sBAAsB;EAC5BC,IAAI,EAAE,MAAM;EACZC,WAAW,EAAE,sEAAsE;EACnFC,KAAK,EAAE,2BAA2B;EAClCtB,OAAO,EAAE,IAAI;EACbG,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,SAAS;EACb0B,IAAI,EAAE,qBAAqB;EAC3BC,IAAI,EAAE,QAAQ;EACdC,WAAW,EAAE,qEAAqE;EAClFC,KAAK,EAAE,+BAA+B;EACtCtB,OAAO,EAAE,KAAK;EACdG,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,OAAO;EACX0B,IAAI,EAAE,aAAa;EACnBC,IAAI,EAAE,OAAO;EACbC,WAAW,EAAE,mEAAmE;EAChFC,KAAK,EAAE,+BAA+B;EACtCtB,OAAO,EAAE,KAAK;EACdG,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,QAAQ;EACZ0B,IAAI,EAAE,yBAAyB;EAC/BC,IAAI,EAAE,QAAQ;EACdC,WAAW,EAAE,+DAA+D;EAC5EC,KAAK,EAAE,4BAA4B;EACnCtB,OAAO,EAAE,KAAK;EACdG,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,QAAQ;EACZ0B,IAAI,EAAE,oBAAoB;EAC1BC,IAAI,EAAE,YAAY;EAClBC,WAAW,EAAE,gEAAgE;EAC7EC,KAAK,EAAE,2BAA2B;EAClCtB,OAAO,EAAE,KAAK;EACdG,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,EACD;EACEX,EAAE,EAAE,UAAU;EACd0B,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,UAAU;EAChBC,WAAW,EAAE,iEAAiE;EAC9EC,KAAK,EAAE,6BAA6B;EACpCtB,OAAO,EAAE,KAAK;EACdG,SAAS,EAAE,sBAAsB;EACjCC,SAAS,EAAE;AACb,CAAC,CACF;;AAED;AACA,MAAMmB,KAAK,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;;AAErE;AACA,OAAO,MAAMI,YAAY,GAAG;EAC1B;EACAC,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB,MAAMN,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAClB,IAAI;MACF;MACA;MACA,OAAO;QACLO,OAAO,EAAE,IAAI;QACbC,IAAI,EAAEb,cAAc;QACpBc,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QACLH,OAAO,EAAE,KAAK;QACdC,IAAI,EAAE,EAAE;QACRC,OAAO,EAAE,4BAA4B;QACrCC,KAAK,EAAEA,KAAK,CAACD;MACf,CAAC;IACH;EACF,CAAC;EAED;EACAE,eAAe,EAAE,MAAOC,UAAU,IAAK;IACrC,MAAMZ,KAAK,CAAC,GAAG,CAAC;IAChB,IAAI;MACF,MAAM5B,QAAQ,GAAGuB,cAAc,CAACkB,IAAI,CAACnB,GAAG,IAAIA,GAAG,CAACxB,EAAE,KAAK0C,UAAU,CAAC;MAClE,IAAI,CAACxC,QAAQ,EAAE;QACb,OAAO;UACLmC,OAAO,EAAE,KAAK;UACdC,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE;QACX,CAAC;MACH;MACA,OAAO;QACLF,OAAO,EAAE,IAAI;QACbC,IAAI,EAAEpC,QAAQ;QACdqC,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QACLH,OAAO,EAAE,KAAK;QACdC,IAAI,EAAE,IAAI;QACVC,OAAO,EAAE,0BAA0B;QACnCC,KAAK,EAAEA,KAAK,CAACD;MACf,CAAC;IACH;EACF,CAAC;EAED;EACAK,sBAAsB,EAAE,MAAAA,CAAOF,UAAU,EAAEG,OAAO,GAAG,CAAC,CAAC,KAAK;IAC1D,MAAMf,KAAK,CAAC,GAAG,CAAC;IAChB,IAAI;MACF,IAAIgB,SAAS,GAAG/C,aAAa,CAACgD,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC9C,QAAQ,KAAKwC,UAAU,CAAC;;MAEpE;MACA,IAAIG,OAAO,CAAC1C,UAAU,EAAE;QACtB2C,SAAS,GAAGA,SAAS,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC7C,UAAU,KAAK0C,OAAO,CAAC1C,UAAU,CAAC;MACxE;MAEA,IAAI0C,OAAO,CAACzC,IAAI,EAAE;QAChB0C,SAAS,GAAGA,SAAS,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC5C,IAAI,KAAKyC,OAAO,CAACzC,IAAI,CAAC;MAC5D;MAEA,IAAIyC,OAAO,CAACI,MAAM,EAAE;QAClB,MAAMC,WAAW,GAAGL,OAAO,CAACI,MAAM,CAACE,WAAW,CAAC,CAAC;QAChDL,SAAS,GAAGA,SAAS,CAACC,MAAM,CAACC,CAAC,IAC5BA,CAAC,CAAC/C,QAAQ,CAACkD,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,WAAW,CAAC,IAC9CF,CAAC,CAAC3C,IAAI,CAACgD,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACH,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,WAAW,CAAC,CAC5D,CAAC;MACH;;MAEA;MACA,IAAIL,OAAO,CAACU,MAAM,EAAE;QAClB,QAAQV,OAAO,CAACU,MAAM;UACpB,KAAK,SAAS;YACZT,SAAS,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACjD,KAAK,GAAGgD,CAAC,CAAChD,KAAK,CAAC;YAC3C;UACF,KAAK,QAAQ;YACXqC,SAAS,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAAChD,SAAS,CAAC,GAAG,IAAIiD,IAAI,CAACF,CAAC,CAAC/C,SAAS,CAAC,CAAC;YACvE;UACF,KAAK,YAAY;YACf,MAAMkD,eAAe,GAAG;cAAE,UAAU,EAAE,CAAC;cAAE,cAAc,EAAE,CAAC;cAAE,UAAU,EAAE;YAAE,CAAC;YAC3Ed,SAAS,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKE,eAAe,CAACH,CAAC,CAACtD,UAAU,CAAC,GAAGyD,eAAe,CAACF,CAAC,CAACvD,UAAU,CAAC,CAAC;YACvF;UACF;YACE;QACJ;MACF;MAEA,OAAO;QACLkC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAEQ,SAAS;QACfe,KAAK,EAAEf,SAAS,CAACgB,MAAM;QACvBvB,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QACLH,OAAO,EAAE,KAAK;QACdC,IAAI,EAAE,EAAE;QACRuB,KAAK,EAAE,CAAC;QACRtB,OAAO,EAAE,2BAA2B;QACpCC,KAAK,EAAEA,KAAK,CAACD;MACf,CAAC;IACH;EACF,CAAC;EAED;EACAwB,eAAe,EAAE,MAAOC,UAAU,IAAK;IACrC,MAAMlC,KAAK,CAAC,GAAG,CAAC;IAChB,IAAI;MACF,MAAM7B,QAAQ,GAAGF,aAAa,CAAC4C,IAAI,CAACK,CAAC,IAAIA,CAAC,CAAChD,EAAE,KAAKiE,QAAQ,CAACD,UAAU,CAAC,CAAC;MACvE,IAAI,CAAC/D,QAAQ,EAAE;QACb,OAAO;UACLoC,OAAO,EAAE,KAAK;UACdC,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE;QACX,CAAC;MACH;MACA,OAAO;QACLF,OAAO,EAAE,IAAI;QACbC,IAAI,EAAErC,QAAQ;QACdsC,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QACLH,OAAO,EAAE,KAAK;QACdC,IAAI,EAAE,IAAI;QACVC,OAAO,EAAE,0BAA0B;QACnCC,KAAK,EAAEA,KAAK,CAACD;MACf,CAAC;IACH;EACF,CAAC;EAED;EACA2B,mBAAmB,EAAE,MAAAA,CAAOF,UAAU,EAAEG,QAAQ,KAAK;IACnD,MAAMrC,KAAK,CAAC,GAAG,CAAC;IAChB,IAAI;MACF;MACA;MACA;MACA;MACA;;MAEA,OAAO;QACLO,OAAO,EAAE,IAAI;QACbE,OAAO,EAAE,GAAG4B,QAAQ;MACtB,CAAC;IACH,CAAC,CAAC,OAAO3B,KAAK,EAAE;MACd,OAAO;QACLH,OAAO,EAAE,KAAK;QACdE,OAAO,EAAE,oBAAoB4B,QAAQ,EAAE;QACvC3B,KAAK,EAAEA,KAAK,CAACD;MACf,CAAC;IACH;EACF,CAAC;EAED;EACA6B,eAAe,EAAE,MAAAA,CAAOC,UAAU,EAAExB,OAAO,GAAG,CAAC,CAAC,KAAK;IACnD,MAAMf,KAAK,CAAC,GAAG,CAAC;IAChB,IAAI;MACF,IAAIgB,SAAS,GAAG/C,aAAa;MAE7B,IAAIsE,UAAU,EAAE;QACd,MAAMnB,WAAW,GAAGmB,UAAU,CAAClB,WAAW,CAAC,CAAC;QAC5CL,SAAS,GAAGA,SAAS,CAACC,MAAM,CAACC,CAAC,IAC5BA,CAAC,CAAC/C,QAAQ,CAACkD,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,WAAW,CAAC,IAC9CF,CAAC,CAAC3C,IAAI,CAACgD,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACH,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,WAAW,CAAC,CAAC,IAC3DF,CAAC,CAAC1C,MAAM,CAAC6C,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,WAAW,CAC7C,CAAC;MACH;;MAEA;MACA,IAAIL,OAAO,CAAC3C,QAAQ,EAAE;QACpB4C,SAAS,GAAGA,SAAS,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC9C,QAAQ,KAAK2C,OAAO,CAAC3C,QAAQ,CAAC;MACpE;MAEA,OAAO;QACLmC,OAAO,EAAE,IAAI;QACbC,IAAI,EAAEQ,SAAS;QACfe,KAAK,EAAEf,SAAS,CAACgB,MAAM;QACvBvB,OAAO,EAAE;MACX,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QACLH,OAAO,EAAE,KAAK;QACdC,IAAI,EAAE,EAAE;QACRuB,KAAK,EAAE,CAAC;QACRtB,OAAO,EAAE,eAAe;QACxBC,KAAK,EAAEA,KAAK,CAACD;MACf,CAAC;IACH;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAM+B,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,OAAO,IAAItC,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACf,MAAMqC,KAAK,GAAG3D,sBAAsB,CAAC,CAAC;MACtC,MAAM4D,mBAAmB,GAAG/C,cAAc,CAACgD,GAAG,CAACvE,QAAQ;QAAA,IAAAwE,kBAAA,EAAAC,mBAAA,EAAAC,mBAAA,EAAAC,mBAAA,EAAAC,mBAAA,EAAAC,mBAAA;QAAA,OAAK;UAC1D,GAAG7E,QAAQ;UACXa,aAAa,EAAE,EAAA2D,kBAAA,GAAAH,KAAK,CAACrE,QAAQ,CAACF,EAAE,CAAC,cAAA0E,kBAAA,uBAAlBA,kBAAA,CAAoB3D,aAAa,KAAI,CAAC;UACrDC,UAAU,EAAE,EAAA2D,mBAAA,GAAAJ,KAAK,CAACrE,QAAQ,CAACF,EAAE,CAAC,cAAA2E,mBAAA,uBAAlBA,mBAAA,CAAoB3D,UAAU,KAAI,CAAC;UAC/CC,UAAU,EAAE,EAAA2D,mBAAA,GAAAL,KAAK,CAACrE,QAAQ,CAACF,EAAE,CAAC,cAAA4E,mBAAA,uBAAlBA,mBAAA,CAAoB3D,UAAU,KAAI,CAAC;UAC/CC,gBAAgB,EAAE,EAAA2D,mBAAA,GAAAN,KAAK,CAACrE,QAAQ,CAACF,EAAE,CAAC,cAAA6E,mBAAA,uBAAlBA,mBAAA,CAAoB3D,gBAAgB,KAAI,CAAC;UAC3DC,YAAY,EAAE,EAAA2D,mBAAA,GAAAP,KAAK,CAACrE,QAAQ,CAACF,EAAE,CAAC,cAAA8E,mBAAA,uBAAlBA,mBAAA,CAAoB3D,YAAY,KAAI;YAAEC,QAAQ,EAAE,CAAC;YAAEC,YAAY,EAAE,CAAC;YAAEC,QAAQ,EAAE;UAAE,CAAC;UAC/FC,KAAK,EAAE,EAAAwD,mBAAA,GAAAR,KAAK,CAACrE,QAAQ,CAACF,EAAE,CAAC,cAAA+E,mBAAA,uBAAlBA,mBAAA,CAAoBxD,KAAK,KAAI,CAAC;QACvC,CAAC;MAAA,CAAC,CAAC;MACHU,OAAO,CAACuC,mBAAmB,CAAC;IAC9B,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMQ,wBAAwB,GAAG,MAAOtC,UAAU,IAAK;EAC5D,OAAO,IAAIV,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACf,MAAMY,SAAS,GAAG/C,aAAa,CAACgD,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC9C,QAAQ,KAAKwC,UAAU,CAAC;MACtET,OAAO,CAACa,SAAS,CAAC;IACpB,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMmC,iBAAiB,GAAG,MAAOjB,UAAU,IAAK;EACrD,OAAO,IAAIhC,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACf,MAAMjC,QAAQ,GAAGF,aAAa,CAAC4C,IAAI,CAACK,CAAC,IAAIA,CAAC,CAAChD,EAAE,KAAKiE,QAAQ,CAACD,UAAU,CAAC,CAAC;MACvE/B,OAAO,CAAChC,QAAQ,CAAC;IACnB,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMmE,eAAe,GAAG,MAAAA,CAAOc,KAAK,EAAErC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC5D,OAAO,IAAIb,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACf,IAAIiD,OAAO,GAAG,CAAC,GAAGpF,aAAa,CAAC;MAEhC,IAAImF,KAAK,EAAE;QACT,MAAME,UAAU,GAAGF,KAAK,CAAC/B,WAAW,CAAC,CAAC;QACtCgC,OAAO,GAAGA,OAAO,CAACpC,MAAM,CAACC,CAAC,IACxBA,CAAC,CAAC/C,QAAQ,CAACkD,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACgC,UAAU,CAAC,IAC7CpC,CAAC,CAAC1C,MAAM,CAAC6C,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACgC,UAAU,CAAC,IAC3CpC,CAAC,CAAC3C,IAAI,CAACgD,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACH,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACgC,UAAU,CAAC,CAC3D,CAAC;MACH;MAEA,IAAIvC,OAAO,CAAC3C,QAAQ,EAAE;QACpBiF,OAAO,GAAGA,OAAO,CAACpC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC9C,QAAQ,KAAK2C,OAAO,CAAC3C,QAAQ,CAAC;MAChE;MAEA,IAAI2C,OAAO,CAAC1C,UAAU,EAAE;QACtBgF,OAAO,GAAGA,OAAO,CAACpC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC7C,UAAU,KAAK0C,OAAO,CAAC1C,UAAU,CAAC;MACpE;MAEA,IAAI0C,OAAO,CAACzC,IAAI,EAAE;QAChB+E,OAAO,GAAGA,OAAO,CAACpC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC5C,IAAI,KAAKyC,OAAO,CAACzC,IAAI,CAAC;MACxD;MAEA6B,OAAO,CAACkD,OAAO,CAAC;IAClB,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,OAAO,IAAIrD,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACf,MAAMqC,KAAK,GAAG3D,sBAAsB,CAAC,CAAC;MACtC,MAAM0E,cAAc,GAAGvF,aAAa,CAAC+D,MAAM;MAC3C,MAAM9C,UAAU,GAAGjB,aAAa,CAACwF,MAAM,CAAC,CAACC,GAAG,EAAExC,CAAC,KAAKwC,GAAG,IAAIxC,CAAC,CAACxC,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;MAC5E,MAAMS,UAAU,GAAGlB,aAAa,CAACwF,MAAM,CAAC,CAACC,GAAG,EAAExC,CAAC,KAAKwC,GAAG,IAAIxC,CAAC,CAACvC,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;MAC5E,MAAMS,gBAAgB,GAAGnB,aAAa,CAACgD,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACzC,OAAO,CAAC,CAACuD,MAAM;;MAEpE;MACA,MAAM3C,YAAY,GAAGpB,aAAa,CAACwF,MAAM,CAAC,CAACE,GAAG,EAAEzC,CAAC,KAAK;QACpDyC,GAAG,CAACzC,CAAC,CAAC7C,UAAU,CAAC,GAAG,CAACsF,GAAG,CAACzC,CAAC,CAAC7C,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;QAChD,OAAOsF,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;;MAEN;MACA,MAAMlE,KAAK,GAAGxB,aAAa,CAACwF,MAAM,CAAC,CAACE,GAAG,EAAEzC,CAAC,KAAK;QAC7CyC,GAAG,CAACzC,CAAC,CAAC5C,IAAI,CAAC,GAAG,CAACqF,GAAG,CAACzC,CAAC,CAAC5C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;QACpC,OAAOqF,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;;MAEN;MACA,MAAM5E,UAAU,GAAGd,aAAa,CAACwF,MAAM,CAAC,CAACE,GAAG,EAAEzC,CAAC,KAAK;QAClDyC,GAAG,CAACzC,CAAC,CAAC9C,QAAQ,CAAC,GAAG,CAACuF,GAAG,CAACzC,CAAC,CAAC9C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;QAC5C,OAAOuF,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;MAENxD,OAAO,CAAC;QACNqD,cAAc;QACdtE,UAAU;QACVC,UAAU;QACVC,gBAAgB;QAChBC,YAAY;QACZI,KAAK;QACLV,UAAU;QACV6E,aAAa,EAAEnB;MACjB,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;AAED,eAAepC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}